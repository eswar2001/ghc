
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 124, types: 69, coercions: 4, joins: 1/1}

lvl = "error"#

lvl1 = unpackCString# lvl

$trModule4 = "main"#

lvl2 = unpackCString# $trModule4

$trModule2 = "T21128a"#

lvl3 = unpackCString# $trModule2

lvl4 = "./T21128a.hs"#

lvl5 = unpackCString# lvl4

lvl6 = I# 4#

lvl7 = I# 20#

lvl8 = I# 25#

lvl9 = SrcLoc lvl2 lvl3 lvl5 lvl6 lvl7 lvl6 lvl8

lvl10 = PushCallStack lvl1 lvl9 EmptyCallStack

indexError
  = \ @a @b $dShow eta eta1 eta2 ->
      error
        (lvl10 `cast` <Co:4> :: ...)
        (++ (show $dShow eta) (++ (show $dShow eta1) (show $dShow eta2)))

$trModule3 = TrNameS $trModule4

$trModule1 = TrNameS $trModule2

$trModule = Module $trModule3 $trModule1

$wlvl
  = \ ww ww1 ww2 -> indexError $fShowInt (I# ww2) (I# ww1) (I# ww)

index
  = \ l u i ->
      case l of { I# x ->
      case i of { I# y ->
      join { $j = case u of { I# ww -> $wlvl y ww x } } in
      case <=# x y of {
        __DEFAULT -> jump $j;
        1# ->
          case u of { I# y1 ->
          case <# y y1 of {
            __DEFAULT -> jump $j;
            1# -> I# (-# y x)
          }
          }
      }
      }
      }




==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 107, types: 47, coercions: 0, joins: 4/5}

$trModule4 = "main"#

$trModule3 = TrNameS $trModule4

$trModule2 = "T21128"#

$trModule1 = TrNameS $trModule2

$trModule = Module $trModule3 $trModule1

i = I# 1#

l = I# 0#

lvl = \ x y -> indexError $fShowInt x y i

lvl1 = \ y -> indexError $fShowInt l y l

$wtheresCrud
  = \ ww ww1 ->
      let { y = I# ww1 } in
      join {
        exit
          = case <# 0# ww1 of {
              __DEFAULT -> case lvl1 y of wild { };
              1# -> 0#
            } } in
      join {
        exit1
          = join { $j = case lvl (I# ww) y of wild { } } in
            case <=# ww 1# of {
              __DEFAULT -> jump $j;
              1# ->
                case <# 1# ww1 of {
                  __DEFAULT -> jump $j;
                  1# -> -# 1# ww
                }
            } } in
      joinrec {
        $wgo ww2
          = case ww2 of wild {
              __DEFAULT -> jump $wgo (-# wild 1#);
              0# -> jump exit;
              1# -> jump exit1
            }; } in
      jump $wgo ww

theresCrud
  = \ x y ->
      case x of { I# ww ->
      case y of { I# ww1 ->
      case $wtheresCrud ww ww1 of ww2 { __DEFAULT -> I# ww2 }
      }
      }



