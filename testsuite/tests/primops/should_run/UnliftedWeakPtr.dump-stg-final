
==================== Final STG: ====================
2023-09-19 16:23:01.5732892 UTC

Main.finalise2 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []] =
    "finalised!"#;

Main.finalise1 :: [GHC.Types.Char]
[GblId] =
    {} \u [] GHC.CString.unpackCString# Main.finalise2;

Main.finalise
  :: GHC.Prim.MVar# GHC.Prim.RealWorld GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L><L>, Cpr=1(, 1), Unf=OtherCon []] =
    {} \r [mvar_s1xt void_0E]
        case
            putMVar# [mvar_s1xt Main.finalise1 GHC.Prim.void#]
        of
        s1_s1xv [Occ=Once1]
        {
        (##) -> Solo# [GHC.Tuple.Prim.()];
        };

Main.inner [InlPrag=[2]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld GHC.Base.String
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Res #)
[GblId, Arity=3, Str=<L><L><L>, Cpr=1(, 1), Unf=OtherCon []] =
    {} \r [mvar_s1xw u_s1xx void_0E]
        case newByteArray# [42# GHC.Prim.void#] of {
        Solo# ipv1_s1xB [Occ=Once1] ->
        let {
          sat_s1xE [Occ=Once1]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              {mvar_s1xw} \r [void_XF]
                  case
                      putMVar# [mvar_s1xw Main.finalise1 GHC.Prim.void#]
                  of
                  s2_s1xD [Occ=Once1]
                  {
                  (##) -> Solo# [GHC.Tuple.Prim.()];
                  };
        } in 
          case mkWeak# [u_s1xx ipv1_s1xB sat_s1xE GHC.Prim.void#] of {
          Solo# ipv3_s1xH ->
          case deRefWeak# [ipv3_s1xH GHC.Prim.void#] of {
          (#,#) ipv5_s1xK [Occ=Once1] ipv6_s1xL [Occ=Once1] ->
          let {
            sat_s1xO [Occ=Once1] :: GHC.Base.String
            [LclId] =
                {ipv6_s1xL} \u []
                    case sizeofMutableByteArray# [ipv6_s1xL] of sat_s1xN [Occ=Once1] {
                    __DEFAULT -> GHC.Show.itos sat_s1xN GHC.Types.[];
                    }; } in
          let {
            sat_s1xP [Occ=Once1] :: [GHC.Base.String]
            [LclId] =
                :! [sat_s1xO GHC.Types.[]]; } in
          let {
            sat_s1xM [Occ=Once1] :: GHC.Base.String
            [LclId] =
                {ipv5_s1xK} \u [] GHC.Show.itos ipv5_s1xK GHC.Types.[]; } in
          let {
            sat_s1xQ [Occ=Once1] :: [GHC.Base.String]
            [LclId] =
                :! [sat_s1xM sat_s1xP]; } in
          let {
            sat_s1xR [Occ=Once1] :: Main.Res
            [LclId] =
                Main.Res! [ipv3_s1xH sat_s1xQ];
          } in  Solo# [sat_s1xR];
          };
          };
        };

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L>, Unf=OtherCon []] =
    {} \r [void_0E]
        case newMVar# [GHC.Prim.void#] of {
        Solo# ipv1_s1xV ->
        case newMutVar# [GHC.Types.False GHC.Prim.void#] of {
        Solo# ipv3_s1xY ->
        let {
          sat_s1xZ [Occ=Once1]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Res #)
          [LclId] =
              {ipv1_s1xV, ipv3_s1xY} \r [void_XF]
                  Main.inner ipv1_s1xV ipv3_s1xY GHC.Prim.void#;
        } in 
          case
              keepAlive# [GHC.Prim.coercionToken#
                          ipv3_s1xY
                          GHC.Prim.void#
                          sat_s1xZ]
          of
          {
          Solo# ipv5_s1y2 [Occ=Once1!] ->
          case ipv5_s1y2 of {
          Main.Res wk_s1y4 [Occ=Once1] strs_s1y5 [Occ=Once1] ->
          case
              __ffi_static_ccall_safe base:performMajorGC :: [GHC.Prim.void#]
          of
          {
          (##) ->
          case deRefWeak# [wk_s1y4 GHC.Prim.void#] of {
          (#,#) ipv7_s1yb [Occ=Once1] _ [Occ=Dead] ->
          case takeMVar# [ipv1_s1xV GHC.Prim.void#] of {
          Solo# ipv10_s1yf [Occ=Once1] ->
          let {
            sat_s1yk [Occ=Once1] :: GHC.Base.String
            [LclId] =
                {strs_s1y5, ipv7_s1yb, ipv10_s1yf} \u []
                    let {
                      sat_s1yh [Occ=Once1] :: [[GHC.Types.Char]]
                      [LclId] =
                          :! [ipv10_s1yf GHC.Types.[]]; } in
                    let {
                      sat_s1yg [Occ=Once1] :: GHC.Base.String
                      [LclId] =
                          {ipv7_s1yb} \u [] GHC.Show.itos ipv7_s1yb GHC.Types.[]; } in
                    let {
                      sat_s1yi [Occ=Once1] :: [[GHC.Types.Char]]
                      [LclId] =
                          :! [sat_s1yg sat_s1yh];
                    } in 
                      case GHC.Base.++ strs_s1y5 sat_s1yi of sat_s1yj [Occ=Once1] {
                      __DEFAULT ->
                      GHC.Show.showList__
                          GHC.Show.$fShowCallStack_$cshowList1 sat_s1yj GHC.Types.[];
                      };
          } in 
            GHC.IO.Handle.Text.hPutStr2
                GHC.IO.StdHandles.stdout sat_s1yk GHC.Types.True GHC.Prim.void#;
          };
          };
          };
          };
          };
        };
        };

Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L>, Unf=OtherCon []] =
    {} \r [void_0E] Main.main1 GHC.Prim.void#;

Main.main2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L>, Unf=OtherCon []] =
    {} \r [void_0E]
        GHC.TopHandler.runMainIO1 Main.main1 GHC.Prim.void#;

:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L>, Unf=OtherCon []] =
    {} \r [void_0E] Main.main2 GHC.Prim.void#;

Main.Res [InlPrag=CONLIKE]
  :: GHC.Prim.Weak# (GHC.Prim.MutableByteArray# GHC.Prim.RealWorld)
     %1 -> [GHC.Base.String] %1 -> Main.Res
[GblId[DataCon], Arity=2, Caf=NoCafRefs, Unf=OtherCon []] =
    {} \r [eta_B0 eta_B1] Main.Res [eta_B0 eta_B1];

Main.U [InlPrag=CONLIKE] :: GHC.Prim.Int# %1 -> Main.U
[GblId[DataCon], Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    {} \r [eta_B0] Main.U [eta_B0];

