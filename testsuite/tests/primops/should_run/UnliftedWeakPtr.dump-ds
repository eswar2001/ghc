
==================== Desugar (after optimization) ====================
2023-09-19 16:23:01.4184099 UTC

Result size of Desugar (after optimization)
  = {terms: 150, types: 341, coercions: 25, joins: 0/0}

-- RHS size: {terms: 12, types: 16, coercions: 0, joins: 0/0}
finalise
  :: MVar# RealWorld String
     -> State# RealWorld -> (# State# RealWorld, () #)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0] 74 10}]
finalise
  = \ (mvar_aKR :: MVar# RealWorld String)
      (s0_aKS :: State# RealWorld) ->
      case putMVar#
             @Lifted
             @RealWorld
             @String
             mvar_aKR
             (unpackCString# "finalised!"#)
             s0_aKS
      of s1_aKT
      { __DEFAULT ->
      (# s1_aKT, GHC.Tuple.Prim.() #)
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dShow_aUH :: Show [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=True, WorkFree=False, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$dShow_aUH = GHC.Show.$fShowList @Char GHC.Show.$fShowChar

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
$dShow_aUy :: Show [String]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=True, WorkFree=False, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$dShow_aUy = GHC.Show.$fShowList @[Char] $dShow_aUH

-- RHS size: {terms: 50, types: 102, coercions: 0, joins: 0/0}
inner
  :: MVar# RealWorld String
     -> MutVar# RealWorld Bool
     -> State# RealWorld
     -> (# State# RealWorld, Res #)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0] 232 10}]
inner
  = \ (mvar_aKH :: MVar# RealWorld String)
      (u_aKI :: MutVar# RealWorld Bool)
      (s0_aKJ :: State# RealWorld) ->
      case newByteArray# @RealWorld 42# s0_aKJ of ds_dVZ { __DEFAULT ->
      case ds_dVZ of { (# s1_aKK, ba#_aKL #) ->
      case mkWeak#
             @Unlifted
             @Unlifted
             @(MutVar# RealWorld Bool)
             @(MutableByteArray# RealWorld)
             @()
             u_aKI
             ba#_aKL
             (finalise mvar_aKH)
             s1_aKK
      of ds_dW1
      { __DEFAULT ->
      case ds_dW1 of { (# s2_aKM, wk_aKN #) ->
      case deRefWeak#
             @Unlifted @(MutableByteArray# RealWorld) wk_aKN s2_aKM
      of ds_dW3
      { __DEFAULT ->
      case ds_dW3 of { (# s3_aKO, i_aKP, ba'#_aKQ #) ->
      (# s3_aKO,
         Main.Res
           wk_aKN
           (build
              @String
              (\ (@a_dW9)
                 (c_dWa [OS=OneShot] :: String -> a_dW9 -> a_dW9)
                 (n_dWb [OS=OneShot] :: a_dW9) ->
                 c_dWa
                   (show @Int GHC.Show.$fShowInt (GHC.Types.I# i_aKP))
                   (c_dWa
                      (show
                         @Int
                         GHC.Show.$fShowInt
                         (GHC.Types.I# (sizeofMutableByteArray# @RealWorld ba'#_aKQ)))
                      n_dWb))) #)
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 76, types: 181, coercions: 25, joins: 0/0}
main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 366 0}]
main
  = >>=
      @IO
      GHC.Base.$fMonadIO
      @[String]
      @()
      ((\ (s0_aAn :: State# RealWorld) ->
          case newMVar# @Lifted @RealWorld @String s0_aAn of ds_dWd
          { __DEFAULT ->
          case ds_dWd of { (# s1_aAo, mvar_aAp #) ->
          case newMutVar# @Lifted @Bool @RealWorld GHC.Types.False s1_aAo
          of ds_dWf
          { __DEFAULT ->
          case ds_dWf of { (# s2_aAq, val_var_aAr #) ->
          case keepAlive#
                 @(TupleRep [ZeroBitRep, LiftedRep])
                 @Unlifted
                 @(MutVar# RealWorld Bool)
                 @RealWorld
                 @(# State# RealWorld, Res #)
                 ((CO: <TupleRep [ZeroBitRep, LiftedRep]>_N)
                  `cast` (Sub (Sym (AxSmallRep# (<TupleRep
                                                    [ZeroBitRep, LiftedRep]>_N)))
                          :: (TupleRep [ZeroBitRep, LiftedRep]
                              GHC.Prim.~# TupleRep [ZeroBitRep, LiftedRep])
                             ~R# GHC.Prim.SmallRep# (TupleRep [ZeroBitRep, LiftedRep])))
                 val_var_aAr
                 s2_aAq
                 (inner mvar_aAp val_var_aAr)
          of ds_dWh
          { __DEFAULT ->
          case ds_dWh of { (# s3_aAs, ds_dWy #) ->
          case ds_dWy of { Res wk_aAt strs_aAu ->
          case unIO @() performGC s3_aAs of ds_dWk { __DEFAULT ->
          case ds_dWk of { (# s4_aAw, _ [Occ=Dead] #) ->
          case deRefWeak#
                 @Unlifted @(MutableByteArray# RealWorld) wk_aAt s4_aAw
          of ds_dWn
          { __DEFAULT ->
          case ds_dWn of { (# s5_aAx, j_aAy, _ [Occ=Dead] #) ->
          case takeMVar# @Lifted @RealWorld @String mvar_aAp s5_aAx of ds_dWq
          { __DEFAULT ->
          case ds_dWq of { (# s6_aAz, r_aAA #) ->
          (# s6_aAz,
             ++
               @String
               strs_aAu
               (build
                  @String
                  (\ (@a_dWt)
                     (c_dWu [OS=OneShot] :: String -> a_dWt -> a_dWt)
                     (n_dWv [OS=OneShot] :: a_dWt) ->
                     c_dWu
                       (show @Int GHC.Show.$fShowInt (GHC.Types.I# j_aAy))
                       (c_dWu r_aAA n_dWv))) #)
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          })
       `cast` (Sym (GHC.Types.N:IO[0] <[String]>_R)
               :: (State# RealWorld -> (# State# RealWorld, [String] #))
                  ~R# IO [String]))
      (\ (res_aHG :: [String]) -> print @[String] $dShow_aUy res_aHG)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 60}]
:Main.main = GHC.TopHandler.runMainIO @() main


