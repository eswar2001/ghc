ref    compiler/GHC/Core/Coercion/Axiom.hs:472:2:     Note [RoughMap and rm_empty]
ref    compiler/GHC/Core/Opt/OccurAnal.hs:1157:7:     Note [Loop breaking]
ref    compiler/GHC/Core/Opt/SetLevels.hs:1586:30:     Note [Top level scope]
ref    compiler/GHC/Core/Opt/Simplify/Iteration.hs:2832:13:     Note [Case binder next]
ref    compiler/GHC/Core/Opt/Simplify/Iteration.hs:4023:8:     Note [Lambda-bound unfoldings]
ref    compiler/GHC/Core/Opt/Simplify/Utils.hs:1342:37:     Note [Gentle mode]
ref    compiler/GHC/Core/Opt/Specialise.hs:1763:29:     Note [Arity decrease]
ref    compiler/GHC/Core/TyCo/Rep.hs:1652:31:     Note [What prevents a constraint from floating]
ref    compiler/GHC/Driver/DynFlags.hs:1251:52:     Note [Eta-reduction in -O0]
ref    compiler/GHC/Driver/Main.hs:1749:34:     Note [simpleTidyPgm - mkBootModDetailsTc]
ref    compiler/GHC/Hs/Expr.hs:191:63:     Note [Pending Splices]
ref    compiler/GHC/Hs/Expr.hs:1727:87:     Note [Lifecycle of a splice]
ref    compiler/GHC/Hs/Expr.hs:1763:7:     Note [Pending Splices]
ref    compiler/GHC/Hs/Extension.hs:147:5:     Note [Strict argument type constraints]
ref    compiler/GHC/Hs/Pat.hs:141:74:     Note [Lifecycle of a splice]
ref    compiler/GHC/HsToCore/Pmc/Solver.hs:856:20:     Note [COMPLETE sets on data families]
ref    compiler/GHC/HsToCore/Quote.hs:1487:7:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Stg/Unarise.hs:438:32:     Note [Renaming during unarisation]
ref    compiler/GHC/StgToCmm/Expr.hs:578:4:     Note [case on bool]
ref    compiler/GHC/Tc/Gen/HsType.hs:556:56:     Note [Skolem escape prevention]
ref    compiler/GHC/Tc/Gen/HsType.hs:2676:7:     Note [Matching a kind signature with a declaration]
ref    compiler/GHC/Tc/Gen/Pat.hs:174:20:     Note [Typing patterns in pattern bindings]
ref    compiler/GHC/Tc/Gen/Pat.hs:1163:7:     Note [Matching polytyped patterns]
ref    compiler/GHC/Tc/Gen/Sig.hs:80:10:     Note [Overview of type signatures]
ref    compiler/GHC/Tc/Gen/Splice.hs:358:16:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Tc/Gen/Splice.hs:533:35:     Note [PendingRnSplice]
ref    compiler/GHC/Tc/Gen/Splice.hs:657:7:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Tc/Gen/Splice.hs:891:11:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Tc/Instance/Family.hs:406:35:     Note [Constrained family instances]
ref    compiler/GHC/Tc/Solver/Rewrite.hs:1010:7:     Note [Stability of rewriting]
ref    compiler/GHC/Tc/TyCl.hs:1316:6:     Note [Unification variables need fresh Names]
ref    compiler/GHC/Tc/Types/Constraint.hs:206:38:     Note [NonCanonical Semantics]
ref    compiler/GHC/Types/Demand.hs:301:25:     Note [Preserving Boxity of results is rarely a win]
ref    compiler/GHC/Unit/Module/Deps.hs:83:13:     Note [Structure of dep_boot_mods]
ref    compiler/GHC/Utils/Monad.hs:410:34:     Note [multiShotIO]
ref    compiler/Language/Haskell/Syntax/Binds.hs:200:31:     Note [fun_id in Match]
ref    configure.ac:203:10:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    docs/core-spec/core-spec.mng:177:6:     Note [TyBinders]
ref    hadrian/src/Expression.hs:145:30:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    linters/lint-notes/Notes.hs:32:29:     Note [" <> T.unpack x <> "]
ref    linters/lint-notes/Notes.hs:69:22:     Note [...]
ref    testsuite/tests/indexed-types/should_fail/ExtraTcsUntch.hs:30:27:     Note [Extra TcS Untouchables]
ref    testsuite/tests/perf/should_run/all.T:8:6:     Note [Solving from instances when interacting Dicts]
ref    testsuite/tests/polykinds/CuskFam.hs:16:11:     Note [Unifying implicit CUSK variables]
ref    testsuite/tests/simplCore/should_compile/T5776.hs:16:7:     Note [Simplifying RULE lhs constraints]
ref    testsuite/tests/simplCore/should_compile/simpl018.hs:3:7:     Note [Float coercions]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:7:7:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs2.hs:4:6:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/T9117.hs:3:12:     Note [Order of Coercible Instances]
ref    testsuite/tests/typecheck/should_compile/tc200.hs:5:7:     Note [Multiple instantiation]
ref    testsuite/tests/typecheck/should_compile/tc228.hs:9:7:     Note [Inference and implication constraints]
ref    testsuite/tests/typecheck/should_compile/tc231.hs:12:16:     Note [Important subtlety in oclose]
ref    testsuite/tests/typecheck/should_fail/UnliftedNewtypesMultiFieldGadt.hs:11:28:     Note [Kind-checking the field type]
ref    testsuite/tests/typecheck/should_fail/tcfail093.hs:13:7:     Note [Important subtlety in oclose]

