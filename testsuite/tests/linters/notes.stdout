ref    compiler/GHC/Core/Coercion/Axiom.hs:458:2:     Note [RoughMap and rm_empty]
ref    compiler/GHC/Core/Opt/OccurAnal.hs:857:15:     Note [Loop breaking]
ref    compiler/GHC/Core/Opt/SetLevels.hs:1598:30:     Note [Top level scope]
ref    compiler/GHC/Core/Opt/Simplify.hs:2666:13:     Note [Case binder next]
ref    compiler/GHC/Core/Opt/Simplify.hs:3288:0:     Note [Suppressing binder-swaps on linear case]
ref    compiler/GHC/Core/Opt/Simplify.hs:3816:8:     Note [Lambda-bound unfoldings]
ref    compiler/GHC/Core/Opt/Simplify/Utils.hs:1282:37:     Note [Gentle mode]
ref    compiler/GHC/Core/Opt/Specialise.hs:822:39:     Note [Missed specialization for ClassOps]
ref    compiler/GHC/Core/Opt/Specialise.hs:1611:28:     Note [Arity decrease]
ref    compiler/GHC/Core/TyCo/Rep.hs:1748:31:     Note [What prevents a constraint from floating]
ref    compiler/GHC/Driver/Main.hs:1636:34:     Note [simpleTidyPgm - mkBootModDetailsTc]
ref    compiler/GHC/Driver/Session.hs:3961:49:     Note [Eta-reduction in -O0]
ref    compiler/GHC/Hs/Expr.hs:205:63:     Note [Pending Splices]
ref    compiler/GHC/Hs/Expr.hs:1667:87:     Note [Lifecycle of a splice]
ref    compiler/GHC/Hs/Expr.hs:1703:7:     Note [Pending Splices]
ref    compiler/GHC/Hs/Extension.hs:140:5:     Note [Strict argument type constraints]
ref    compiler/GHC/Hs/Pat.hs:140:74:     Note [Lifecycle of a splice]
ref    compiler/GHC/HsToCore/Binds.hs:313:33:     Note [AbsBinds wrappers]
ref    compiler/GHC/HsToCore/Pmc/Solver.hs:855:20:     Note [COMPLETE sets on data families]
ref    compiler/GHC/HsToCore/Quote.hs:1460:7:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Rename/Pat.hs:887:29:     Note [Disambiguating record fields]
ref    compiler/GHC/StgToCmm.hs:106:18:     Note [codegen-split-init]
ref    compiler/GHC/StgToCmm.hs:109:18:     Note [pipeline-split-init]
ref    compiler/GHC/StgToCmm/Expr.hs:585:4:     Note [case on bool]
ref    compiler/GHC/StgToCmm/Expr.hs:849:3:     Note [alg-alt heap check]
ref    compiler/GHC/Tc/Gen/Expr.hs:662:24:     Note [Disambiguating record fields]
ref    compiler/GHC/Tc/Gen/Expr.hs:1196:7:     Note [Disambiguating record fields]
ref    compiler/GHC/Tc/Gen/Expr.hs:1299:11:     Note [Deprecating ambiguous fields]
ref    compiler/GHC/Tc/Gen/HsType.hs:551:56:     Note [Skolem escape prevention]
ref    compiler/GHC/Tc/Gen/HsType.hs:2619:7:     Note [Matching a kind sigature with a declaration]
ref    compiler/GHC/Tc/Gen/Pat.hs:171:20:     Note [Typing patterns in pattern bindings]
ref    compiler/GHC/Tc/Gen/Pat.hs:1105:7:     Note [Matching polytyped patterns]
ref    compiler/GHC/Tc/Gen/Sig.hs:78:10:     Note [Overview of type signatures]
ref    compiler/GHC/Tc/Gen/Splice.hs:361:16:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Tc/Gen/Splice.hs:536:35:     Note [PendingRnSplice]
ref    compiler/GHC/Tc/Gen/Splice.hs:664:7:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Tc/Gen/Splice.hs:908:11:     Note [How brackets and nested splices are handled]
ref    compiler/GHC/Tc/Instance/Family.hs:515:35:     Note [Constrained family instances]
ref    compiler/GHC/Tc/Module.hs:705:15:     Note [Extra dependencies from .hs-boot files]
ref    compiler/GHC/Tc/Solver/Canonical.hs:1087:33:     Note [Canonical LHS]
ref    compiler/GHC/Tc/Solver/Interact.hs:1612:9:     Note [No touchables as FunEq RHS]
ref    compiler/GHC/Tc/Solver/Rewrite.hs:988:7:     Note [Stability of rewriting]
ref    compiler/GHC/Tc/TyCl.hs:1106:6:     Note [Unification variables need fresh Names]
ref    compiler/GHC/Tc/Types.hs:702:33:     Note [Extra dependencies from .hs-boot files]
ref    compiler/GHC/Tc/Types.hs:1433:47:     Note [Care with plugin imports]
ref    compiler/GHC/Tc/Types/Constraint.hs:253:34:     Note [NonCanonical Semantics]
ref    compiler/GHC/Types/Demand.hs:308:25:     Note [Preserving Boxity of results is rarely a win]
ref    compiler/GHC/Types/Name/Occurrence.hs:301:4:     Note [Unique OccNames from Template Haskell]
ref    compiler/GHC/Unit/Module/Deps.hs:82:13:     Note [Structure of dep_boot_mods]
ref    compiler/GHC/Utils/Monad.hs:391:34:     Note [multiShotIO]
ref    compiler/Language/Haskell/Syntax/Binds.hs:204:31:     Note [fun_id in Match]
ref    compiler/Language/Haskell/Syntax/Pat.hs:336:12:     Note [Disambiguating record fields]
ref    configure.ac:212:10:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    docs/core-spec/core-spec.mng:177:6:     Note [TyBinders]
ref    ghc/ghc.mk:62:6:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    hadrian/src/Expression.hs:130:30:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    libraries/base/GHC/ST.hs:134:7:     Note [Definition of runRW#]
ref    linters/lint-notes/Notes.hs:32:29:     Note [" <> T.unpack x <> "]
ref    linters/lint-notes/Notes.hs:69:22:     Note [...]
ref    testsuite/config/ghc:240:10:     Note [WayFlags]
ref    testsuite/driver/testlib.py:153:10:     Note [Why is there no stage1 setup function?]
ref    testsuite/driver/testlib.py:157:2:     Note [Why is there no stage1 setup function?]
ref    testsuite/mk/boilerplate.mk:267:2:     Note [WayFlags]
ref    testsuite/tests/indexed-types/should_fail/ExtraTcsUntch.hs:30:27:     Note [Extra TcS Untouchables]
ref    testsuite/tests/perf/should_run/all.T:3:6:     Note [Solving from instances when interacting Dicts]
ref    testsuite/tests/polykinds/CuskFam.hs:16:11:     Note [Unifying implicit CUSK variables]
ref    testsuite/tests/simplCore/should_compile/T5776.hs:16:7:     Note [Simplifying RULE lhs constraints]
ref    testsuite/tests/simplCore/should_compile/simpl018.hs:3:7:     Note [Float coercions]
ref    testsuite/tests/typecheck/should_compile/CbvOverlap.hs:5:26:     Note [Type variable cycles in Givens]
ref    testsuite/tests/typecheck/should_compile/Improvement.hs:10:12:     Note [No reduction for Derived class constraints]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:7:7:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:21:43:     Note [Type variable cycles in Givens]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs2.hs:4:6:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/T9117.hs:3:12:     Note [Order of Coercible Instances]
ref    testsuite/tests/typecheck/should_compile/tc200.hs:5:7:     Note [Multiple instantiation]
ref    testsuite/tests/typecheck/should_compile/tc228.hs:9:7:     Note [Inference and implication constraints]
ref    testsuite/tests/typecheck/should_compile/tc231.hs:12:16:     Note [Important subtlety in oclose]
ref    testsuite/tests/typecheck/should_fail/UnliftedNewtypesMultiFieldGadt.hs:11:28:     Note [Kind-checking the field type]
ref    testsuite/tests/typecheck/should_fail/tcfail093.hs:13:7:     Note [Important subtlety in oclose]
ref    validate:412:14:     Note [Why is there no stage1 setup function?]

