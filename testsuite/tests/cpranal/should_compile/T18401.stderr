
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 52, types: 86, coercions: 0, joins: 0/0}

Rec {
-- RHS size: {terms: 18, types: 24, coercions: 0, joins: 0/0}
T18401.$w$spoly_$wgo1 :: forall a. a -> [a] -> (# [a] #)
T18401.$w$spoly_$wgo1
  = \ (@a_s1cL) (sc_s1cM :: a_s1cL) (sc1_s1cN :: [a_s1cL]) ->
      case sc1_s1cN of {
        [] -> (# GHC.Types.[] @a_s1cL #);
        : y_a1bH ys_a1bI -> (# GHC.Types.: @a_s1cL sc_s1cM (case T18401.$w$spoly_$wgo1 @a_s1cL y_a1bH ys_a1bI of { (# ww_s1cR #) -> ww_s1cR }) #)
      }
end Rec }

-- RHS size: {terms: 17, types: 22, coercions: 0, joins: 0/0}
si :: forall a. [a] -> (Bool, [a])
si
  = \ (@a_s1bR) (xs0_s1bS :: [a_s1bR]) ->
      case xs0_s1bS of {
        [] -> (GHC.Types.False, GHC.Types.[] @a_s1bR);
        : y_a1bH ys_a1bI -> (GHC.Types.True, case T18401.$w$spoly_$wgo1 @a_s1bR y_a1bH ys_a1bI of { (# ww_s1cR #) -> ww_s1cR })
      }

-- RHS size: {terms: 14, types: 19, coercions: 0, joins: 0/0}
safeInit :: forall a. [a] -> Maybe [a]
safeInit
  = \ (@a_aQu) (xs_awN :: [a_aQu]) ->
      case xs_awN of {
        [] -> GHC.Maybe.Nothing @[a_aQu];
        : y_a1bH ys_a1bI -> GHC.Maybe.Just @[a_aQu] (case T18401.$w$spoly_$wgo1 @a_aQu y_a1bH ys_a1bI of { (# ww_s1cR #) -> ww_s1cR })
      }



