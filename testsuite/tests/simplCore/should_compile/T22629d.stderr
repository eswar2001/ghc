[1 of 2] Compiling T22629d_Lib      ( T22629d_Lib.hs, T22629d_Lib.o )

==================== Specialise ====================
Result size of Specialise
  = {terms: 34, types: 29, coercions: 0, joins: 0/1}

Rec {
-- RHS size: {terms: 19, types: 19, coercions: 0, joins: 0/1}
getNumbers [InlPrag=NOINLINE, Inlineable, Occ=LoopBreaker]
  :: forall a. Num a => NonEmpty a
[LclIdX,
 Arity=1,
 Unf=Unf{Src=StableUserNoInl, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30] 110 10
         Tmpl= \ (@a) ($dNum :: Num a) ->
                 GHC.Base.:|
                   @a
                   (fromInteger @a $dNum (GHC.Num.Integer.IS 42#))
                   (let {
                      ds :: NonEmpty a
                      [LclId,
                       Unf=Unf{Src=<vanilla>, TopLvl=False,
                               Value=False, ConLike=False, WorkFree=False, Expandable=True,
                               Guidance=IF_ARGS [] 20 0}]
                      ds = getNumbers @a $dNum } in
                    GHC.Types.:
                      @a
                      (case ds of { :| a1 [Occ=Once1] _ [Occ=Dead] -> a1 })
                      (case ds of { :| _ [Occ=Dead] as [Occ=Once1] -> as }))}]
getNumbers
  = \ (@a) ($dNum :: Num a) ->
      GHC.Base.:|
        @a
        (fromInteger @a $dNum (GHC.Num.Integer.IS 42#))
        (let {
           ds :: NonEmpty a
           [LclId,
            Unf=Unf{Src=<vanilla>, TopLvl=False,
                    Value=False, ConLike=False, WorkFree=False, Expandable=True,
                    Guidance=IF_ARGS [] 20 0}]
           ds = getNumbers @a $dNum } in
         GHC.Types.:
           @a (case ds of { :| a1 as -> a1 }) (case ds of { :| a1 as -> as }))
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule :: Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$trModule = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule = GHC.Types.TrNameS $trModule

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule :: Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 40 0}]
$trModule = "T22629d_Lib"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule = GHC.Types.TrNameS $trModule

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T22629d_Lib.$trModule :: GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T22629d_Lib.$trModule = GHC.Types.Module $trModule $trModule



[2 of 2] Compiling T22629d          ( T22629d.hs, T22629d.o )

==================== Specialise ====================
Result size of Specialise
  = {terms: 46, types: 52, coercions: 0, joins: 0/1}

Rec {
-- RHS size: {terms: 17, types: 20, coercions: 0, joins: 0/1}
$s$wgetNumbers [InlPrag=[~]] :: (# #) -> (# Int, [Int] #)
[LclId, Arity=1]
$s$wgetNumbers
  = \ (void :: (# #)) ->
      (# GHC.Num.$fNumInt_$cfromInteger (GHC.Num.Integer.IS 42#),
         let {
           ds :: NonEmpty Int
           [LclId,
            Unf=Unf{Src=<vanilla>, TopLvl=False,
                    Value=False, ConLike=False, WorkFree=False, Expandable=True,
                    Guidance=IF_ARGS [] 20 0}]
           ds = getNumbers @Int GHC.Num.$fNumInt } in
         GHC.Types.:
           @Int
           (case ds of { :| a1 [Occ=Once1] _ [Occ=Dead] -> a1 })
           (case ds of { :| _ [Occ=Dead] as [Occ=Once1] -> as }) #)

-- RHS size: {terms: 7, types: 11, coercions: 0, joins: 0/0}
$sgetNumbers [InlPrag=NOINLINE[final]] :: NonEmpty Int
[LclId,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= case T22629d_Lib.$wgetNumbers @Int GHC.Num.$fNumInt of
               { (# ww [Occ=Once1], ww1 [Occ=Once1] #) ->
               GHC.Base.:| @Int ww ww1
               }}]
$sgetNumbers
  = case T22629d_Lib.$wgetNumbers @Int GHC.Num.$fNumInt of
    { (# ww [Occ=Once1], ww1 [Occ=Once1] #) ->
    GHC.Base.:| @Int ww ww1
    }
end Rec }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
foo [InlPrag=NOINLINE] :: Int
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 30 0}]
foo = case getNumbers @Int GHC.Num.$fNumInt of { :| a1 ds1 -> a1 }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$trModule = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule = GHC.Types.TrNameS $trModule

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 30 0}]
$trModule = "T22629d"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule = GHC.Types.TrNameS $trModule

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T22629d.$trModule :: GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=False,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T22629d.$trModule = GHC.Types.Module $trModule $trModule


------ Local rules for imported ids --------
"SPEC/T22629d $wgetNumbers @Int" [final]
    forall ($dNum :: Num Int).
      T22629d_Lib.$wgetNumbers @Int $dNum
      = $s$wgetNumbers GHC.Prim.void#
"SPEC/T22629d getNumbers @Int" [final]
    forall ($dNum :: Num Int). getNumbers @Int $dNum = $sgetNumbers


