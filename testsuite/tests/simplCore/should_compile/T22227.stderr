
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 213, types: 211, coercions: 4, joins: 5/5}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl :: Addr#
[GblId, Unf=OtherCon []]
lvl = "undefined"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1 :: [Char]
[GblId]
lvl1 = unpackCString# lvl

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unboxed.$trModule4 :: Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Unboxed.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2 :: [Char]
[GblId]
lvl2 = unpackCString# Unboxed.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unboxed.$trModule2 :: Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unboxed.$trModule2 = "Unboxed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3 :: [Char]
[GblId]
lvl3 = unpackCString# Unboxed.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4 :: Addr#
[GblId, Unf=OtherCon []]
lvl4 = "T22227.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5 :: [Char]
[GblId]
lvl5 = unpackCString# lvl4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6 :: Int
[GblId, Unf=OtherCon []]
lvl6 = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7 :: Int
[GblId, Unf=OtherCon []]
lvl7 = GHC.Types.I# 17#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8 :: Int
[GblId, Unf=OtherCon []]
lvl8 = GHC.Types.I# 26#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl9 :: GHC.Stack.Types.SrcLoc
[GblId, Unf=OtherCon []]
lvl9 = GHC.Stack.Types.SrcLoc lvl2 lvl3 lvl5 lvl6 lvl7 lvl6 lvl8

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl10 :: GHC.Stack.Types.CallStack
[GblId, Unf=OtherCon []]
lvl10
  = GHC.Stack.Types.PushCallStack
      lvl1 lvl9 GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 3, coercions: 4, joins: 0/0}
uninitialised :: forall {a}. a
[GblId, Str=b, Cpr=b]
uninitialised
  = \ (@a) ->
      undefined
        @LiftedRep
        @a
        (lvl10
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 90, types: 151, coercions: 0, joins: 5/5}
test
  :: Int# -> Int# -> Array# Double -> (# Int#, Int#, Array# Double #)
[GblId,
 Arity=3,
 Str=<L><L><L>,
 Cpr=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 137 0}]
test
  = \ (off :: Int#) (n :: Int#) (oldArr :: Array# Double) ->
      runRW#
        @('TupleRep '[ 'IntRep, 'IntRep, UnliftedRep])
        @(# Int#, Int#, Array# Double #)
        (\ (s [OS=OneShot] :: State# RealWorld) ->
           case newArray#
                  @'Lifted @Double @RealWorld n (uninitialised @Double) s
           of
           { (# ipv, ipv1 #) ->
           join {
             exit [Dmd=SC(S,C(1,L))]
               :: Int# -> State# RealWorld -> (# Int#, Int#, Array# Double #)
             [LclId[JoinId(2)(Nothing)], Arity=2, Str=<L><L>]
             exit (j [OS=OneShot] :: Int#) (s2 [OS=OneShot] :: State# RealWorld)
               = case unsafeFreezeArray# @'Lifted @RealWorld @Double ipv1 s2 of
                 { (# ipv2, ipv3 #) ->
                 (# 0#, j, ipv3 #)
                 } } in
           joinrec {
             loop [Occ=LoopBreaker, Dmd=SC(S,C(1,C(1,L)))]
               :: Int#
                  -> Int# -> State# RealWorld -> (# Int#, Int#, Array# Double #)
             [LclId[JoinId(3)(Nothing)],
              Arity=3,
              Str=<L><L><L>,
              Unf=OtherCon []]
             loop (i :: Int#) (j :: Int#) (s2 :: State# RealWorld)
               = join {
                   exit1 [Dmd=LC(S,C(1,!P(L,L,L)))]
                     :: Int# -> Double# -> (# Int#, Int#, Array# Double #)
                   [LclId[JoinId(2)(Nothing)], Arity=2, Str=<L><L>]
                   exit1 (i1 [OS=OneShot] :: Int#) (x [OS=OneShot] :: Double#)
                     = case writeArray#
                              @'Lifted @RealWorld @Double ipv1 j (GHC.Types.D# (+## x 1.0##)) s2
                       of s3
                       { __DEFAULT ->
                       jump loop (+# i1 1#) (+# j 1#) s3
                       } } in
                 join {
                   $j [Dmd=L!P(L,L,L)] :: (# Int#, Int#, Array# Double #)
                   [LclId[JoinId(0)(Nothing)]]
                   $j = jump exit j s2 } in
                 joinrec {
                   step' [Occ=LoopBreaker, Dmd=SC(S,!P(L,L,L))]
                     :: Int# -> (# Int#, Int#, Array# Double #)
                   [LclId[JoinId(1)(Nothing)], Arity=1, Str=<L>, Unf=OtherCon []]
                   step' (i1 :: Int#)
                     = case >=# i1 n of {
                         __DEFAULT ->
                           case indexArray# @'Lifted @Double oldArr (+# off i1) of
                           { (# ipv2 #) ->
                           case ipv2 of { D# x ->
                           case >## x 10.0## of {
                             __DEFAULT -> jump step' (+# i1 1#);
                             1# -> jump exit1 i1 x
                           }
                           }
                           };
                         1# -> jump $j
                       }; } in
                 jump step' i; } in
           jump loop 0# 0# ipv
           })

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unboxed.$trModule3 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$trModule3 = GHC.Types.TrNameS Unboxed.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unboxed.$trModule1 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$trModule1 = GHC.Types.TrNameS Unboxed.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Unboxed.$trModule :: GHC.Types.Module
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$trModule
  = GHC.Types.Module Unboxed.$trModule3 Unboxed.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1 = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tcStep2 :: Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Unboxed.$tcStep2 = "Step"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tcStep1 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$tcStep1 = GHC.Types.TrNameS Unboxed.$tcStep2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tcStep :: GHC.Types.TyCon
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$tcStep
  = GHC.Types.TyCon
      9345441458829744813##64
      15928240119707513573##64
      Unboxed.$trModule
      Unboxed.$tcStep1
      0#
      GHC.Types.krep$*->*->*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep2
  = GHC.Types.:
      @GHC.Types.KindRep $krep (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep3 = GHC.Types.: @GHC.Types.KindRep $krep1 $krep2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Done1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Unboxed.$tc'Done1
  = GHC.Types.KindRepTyConApp Unboxed.$tcStep $krep3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Done3 :: Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unboxed.$tc'Done3 = "'Done"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Done2 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$tc'Done2 = GHC.Types.TrNameS Unboxed.$tc'Done3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Done :: GHC.Types.TyCon
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$tc'Done
  = GHC.Types.TyCon
      12965714903249458155##64
      720712123234526269##64
      Unboxed.$trModule
      Unboxed.$tc'Done2
      2#
      Unboxed.$tc'Done1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4 = GHC.Types.KindRepFun $krep1 Unboxed.$tc'Done1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Yield1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Unboxed.$tc'Yield1 = GHC.Types.KindRepFun $krep $krep4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Yield3 :: Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unboxed.$tc'Yield3 = "'Yield"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Yield2 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$tc'Yield2 = GHC.Types.TrNameS Unboxed.$tc'Yield3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unboxed.$tc'Yield :: GHC.Types.TyCon
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unboxed.$tc'Yield
  = GHC.Types.TyCon
      16456917800457442198##64
      7357499335137316903##64
      Unboxed.$trModule
      Unboxed.$tc'Yield2
      2#
      Unboxed.$tc'Yield1



