#include "Cmm.h"

// TODO: comment out
// Uncomment to enable assertions during development
#define DEBUG 1

advanceStackFrameIterzh (P_ stack, W_ offsetWords) {
  W_ frameSize;
  (frameSize) = ccall stackFrameSize(stack, offsetWords);

  P_ nextClosurePtr;
  nextClosurePtr = (StgStack_sp(stack) + WDS(offsetWords) + WDS(frameSize));

  P_ stackArrayPtr;
  stackArrayPtr = stack + SIZEOF_StgHeader + OFFSET_StgStack_stack;

  P_ stackBottom;
  W_ stackSize, stackSizeInBytes;
  stackSize = TO_W_(StgStack_stack_size(stack));
  stackSizeInBytes = WDS(stackSize);
  stackBottom = stackSizeInBytes + stackArrayPtr;

  P_ newStack;
  W_ newOffsetWords, hasNext;
  if(nextClosurePtr < stackBottom) (likely: True) {
    newStack = stack;
    newOffsetWords = offsetWords + frameSize;
    hasNext = 1;
  } else {
    P_ underflowFrameStack;
    (underflowFrameStack) = ccall getUnderflowFrameStack(stack, offsetWords);
    if (underflowFrameStack == NULL) (likely: True) {
      newStack = NULL;
      newOffsetWords = NULL;
      hasNext = NULL;
    } else {
      newStack = underflowFrameStack;
      newOffsetWords = NULL;
      hasNext = 1;
    }
  }

  // TODO: Execute this block only in -DDEBUG
#if DEBUG
  if(hasNext > 0) {
    P_ nextClosure;
    nextClosure = StgStack_sp(stack) + WDS(offsetWords);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(nextClosure));
  }
#endif

  return (newStack, newOffsetWords, hasNext);
}

derefStackWordzh (P_ stack, W_ offsetWords) {
  P_ sp;
  sp = StgStack_sp(stack);

  return (W_[sp + WDS(offsetWords)]);
}

getInfoTableTypezh (P_ stack, W_ offsetWords) {
    P_ p, info;
    p = StgStack_sp(stack) + WDS(offsetWords);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(p));
    info  = %INFO_PTR(p);

    W_ type;
    type = TO_W_(%INFO_TYPE(%STD_INFO(info)));
    return (type);
}

getSmallBitmapzh(P_ stack, W_ offsetWords) {
  P_ c;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  W_ bitmap, size, specialType;
  (bitmap) = ccall getBitmapWord(c);
  (size) = ccall getBitmapSize(c);

  return (bitmap, size);
}

getRetSmallSpecialTypezh(P_ stack, W_ offsetWords) {
  P_ c;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  W_ specialType;
  (specialType) = ccall getSpecialRetSmall(c);

  return (specialType);
}

getRetFunSmallBitmapzh(P_ stack, W_ offsetWords) {
  P_ c;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  W_ bitmap, size, specialType;
  (bitmap) = ccall getRetFunBitmapWord(c);
  (size) = ccall getRetFunBitmapSize(c);

  return (bitmap, size);
}

getLargeBitmapzh(P_ stack, W_ offsetWords){
  P_ c, stgArrBytes;
  W_ size;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  (stgArrBytes) = ccall getLargeBitmaps(MyCapability(), c);
  (size) = ccall getLargeBitmapSize(c);

  return (stgArrBytes, size);
}

getBCOLargeBitmapzh(P_ stack, W_ offsetWords){
  P_ c, stgArrBytes;
  W_ size;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  (stgArrBytes) = ccall getBCOLargeBitmaps(MyCapability(), c);
  (size) = ccall getBCOLargeBitmapSize(c);

  return (stgArrBytes, size);
}

getRetFunLargeBitmapzh(P_ stack, W_ offsetWords){
  P_ c, stgArrBytes;
  W_ size;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  (stgArrBytes) = ccall getRetFunLargeBitmaps(MyCapability(), c);
  (size) = ccall getRetFunSize(c);

  return (stgArrBytes, size);
}

// TODO: Use generalized version unpackClosureReferencedByFramezh with offset=0
unpackClosureFromStackFramezh(P_ stack, W_ offsetWords){
  P_ closurePtr, closurePtrPrime;
  // TODO: Rename closurePtr -> closurePtrAddr
  closurePtr = (StgStack_sp(stack) + WDS(offsetWords));
  closurePtrPrime = P_[closurePtr];
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(closurePtrPrime));
  jump stg_unpackClosurezh(closurePtrPrime);
}

getUpdateFrameTypezh(P_ stack, W_ offsetWords){
  P_ c;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  W_ type;
  (type) = ccall getUpdateFrameType(c);
  return (type);
}

unpackClosureReferencedByFramezh(W_ offsetBytes, P_ stack, W_ offsetWords){
  P_ closurePtr, closurePtrPrime;
  // TODO: Rename closurePtr -> closurePtrAddr
  closurePtr = (StgStack_sp(stack) + WDS(offsetWords) + offsetBytes);
  closurePtrPrime = P_[closurePtr];
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(closurePtrPrime));
  jump stg_unpackClosurezh(closurePtrPrime);
}

getCatchFrameExceptionsBlockedzh(P_ stack, W_ offsetWords){
  P_ closurePtr;
  closurePtr = (StgStack_sp(stack) + WDS(offsetWords));
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(closurePtr));

  W_ exceptions_blocked;
  exceptions_blocked = StgCatchFrame_exceptions_blocked(closurePtr);
  return (exceptions_blocked);
}

getWordzh(P_ stack, W_ offsetWords, W_ offsetBytes){
  P_ wordAddr;
  wordAddr = (StgStack_sp(stack) + WDS(offsetWords) + offsetBytes);
  return (W_[wordAddr]);
}

getUnderflowFrameNextChunkzh(P_ stack, W_ offsetWords){
  P_ closurePtr, closurePtrPrime, updateePtr;
  closurePtr = (StgStack_sp(stack) + WDS(offsetWords));
  ASSERT(LOOKS_LIKE_CLOURE_PTR(closurePtr));

  P_ next_chunk;
  (next_chunk) = ccall getUnderflowFrameNextChunk(closurePtr);
  ASSERT(LOOKS_LIKE_CLOURE_PTR(next_chunk));
  return (next_chunk);
}

getRetFunTypezh(P_ stack, W_ offsetWords){
  P_ c;
  c = StgStack_sp(stack) + WDS(offsetWords);
  ASSERT(LOOKS_LIKE_CLOSURE_PTR(c));

  W_ type;
  (type) = ccall getRetFunType(c);
  return (type);
}
